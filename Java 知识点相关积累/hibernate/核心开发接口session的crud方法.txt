
		1、session接口相关：
openSession方法和getCurrentSession方法的相关内容
	（1）openSession（）方法每次都打开新的Session
	     

	（2）getCurrentSession（）方法在事务提交之前都是同一个Session，提交后就会关闭之前的		     Session，创建新的Session
	
	区别：	openSession（）方法需要close（），getCurrentSession（）不需要close（）
	用途：getCurrentSession用在事务边界的时候
	注意：用getCurrentSession时要在hibernate.cfg.cml里配置：
		<property name="current_session_context_class">thread</property>
		注意：（1）如果配置thread，就是从当前线程拿
		（2）配置jta，分布式的事务
其他：jta事务：java_transaction_API，应用在不同数据库上的transaction
      比如存储一个数据，需要在Mysql数据库里存一个，然后在Oracle数据库里也存一个这就是
      分布式事务




		2、session中操作的对象的三种状态

transient：内存中存一个对象，缓存中也没有
persistent：内存中有，缓存中有，数据库有（ID） //Session对象里有一个map，map的value存有这个对象的引用
detached：内存有，缓存没有，数据库有（ID）
		
		

		
		3、delete语句，只有在有ID的时候才能delete
Teacher t = new Teacher();
t.setId(1)
session.delete(t);


		4、查询记录-------load和get方法

load：返回的是代理对象，是在调用这个取出来的数据的时候才生成SQL语句，假如Session关闭了，就        取不到对应的值了,load生成的类是代理对象，是Teacher类的子类

get：执行到get方法时，二话不说，就从数据库里取出数据放到生成的对象里，所以如果Session这时候      关闭了，还能从对象里取到属性

Teacher t = (Teacher)session.get(Teacher.class,1);
Teacher t = (Teacher)session.load(Teacher.class,2);

方法的参数（要当成什么class的类型 | 要查询的ID号，这里参数类型为Serializable，之所以能传数字，是因为hibernate会把数字当成Integer类型处理，而Integer类型实现了Serializable接口）




		5、update

（1）、update时一定要有ID，可以先从数据库里取出来，然后set他的属性，然后提交，这样hibernate会比较缓存和数据库是否一致，如果不一致，hibernate会做出update

（2）、也可以自己创建要修改的类对象，然后设置相关属性，然后update，但是这里会修改所有的属性，如果你其他属性没有设置的话，其他属性就会变成了空值

（3）、如果只想修改某个属性，可以用EJB的HQ语句，如下：
	Query q = session.createQuery("update Teacher t set t.name='jiacun' where id = 2");
	q.executeUpdate();
	注：这里面的sql语句之中： Teacher是类名而不是数据库表名

（4）、总结：如果注重效率，就用EJB的HQ语句---第（3）种， 
             如果不注重效率就可以直接更新所有字段---第（1）、（2）种




		6、clear（）和flush（）方法

clear（）：强制清除session缓存
flush（）：把session中的缓存和数据库做连接



		7、生成I表的语句

