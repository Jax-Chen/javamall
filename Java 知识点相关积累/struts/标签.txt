	
				struts标签笔记


	1、property标签相关：value、default、escape

取字符串：<s:property value="'username'"/>

设定默认值：<s:property value="admin" default="管理员"/>
注：加入在action类里找不到admin，就会输入管理员

设定HTML：<s:property value="<hr>" escape="false">
注：默认escape为true，不会编译成html语言，
    假如设置成false后，会自动编译成html语言



	2、set标签相关：value、scope、var

set声明变量（默认往request和ActionContext里各放一个）：
<s:set var="adminName" value="username"/>
注：value值是object类型的，会从对应的action里面拿

set 声明变量，设定范围为session：
<s:set var="adminPassword" value="password" scope="session"/>


	
	3、bean标签：name、var  
	使用bean标签new对象，并用param设定这个对象的属性值

<s:bean name="com.bjsxt.struts.tags.Dog" var="myDog">
	<s:param name="name" value="'dahuang'">
</s:bean>
注：如果没有声明var="myDog"，那么struts就会把这个对象放到值栈里面，
    在bean标签结束时，struts就会把这个对象从值栈中去掉
	
    声明了var，这个对象就会创建存在action context里，
    在bean标签外也可以用#拿到这个对象


	
	4、include标签和%{}的作用
<s:set var="incPage" value="includ.jsp"/>
包含：<s:include value="%{#incPage}"/>

注：<s:include>标签里的value是字符串类型的，要把字符串类型转化为OGNL类型，
    用%{}把value里面的值当作是OGNL来处理



	5、if、else if、 else标签
取到放到action context里的age值：<s:set var="age" value="#parameters.age[0]"/>

<s:if test="#age < 0 ">wrong age!</s:if>
<s:elseif test="#parameters.age[0] <20">too young </s:elseif>
<s:else>year</s:else>

注：取parameters里的值，取出来是数组类型，所以后面要跟数组的下标
    在多次出现#parameters.age[0]时，可以把这个设置为变量，存放在action context里



	6、iterator，遍历集合、数组、collection等等

	（1）遍历集合
<s:iterator value="{1,2,3}">
	<s:property/>
</s:iterator>
挨个输出数组里的数

	（2）自定义变量
<s:iterator value="{'aaa', 'bbb', 'ccc'}" var="x">
	<s:property value="#x.toUpperCase()"/> |
</s:iterator>
解释：遍历这个数组，然后每个元素都赋值到变量x里，存在action context里

	（3）使用status
<s:iterator value="{'aaa', 'bbb', 'ccc'}" status="status">
	<s:property/> | 
		遍历过的元素总数：<s:property value="#status.count"/> |
		遍历过的元素索引：<s:property value="#status.index"/> |
		当前是偶数？：<s:property value="#status.even"/> |
		当前是奇数？：<s:property value="#status.odd"/> |
		是第一个元素吗？：<s:property value="#status.first"/> |
		是最后一个元素吗？：<s:property value="#status.last"/>
</s:iterator>

	(4)遍历Map
第一种：
<s:iterator value="{1:'a',2:'b',3:'c'}">
	<s:property value="key"/> | <s:property value="value"/>
</s:iterator>

第二种：
<s:iterator value="#{1:'a', 2:'b', 3:'c'}" var="x">
	<s:property value="#x.key"/> | <s:property value="#x.value"/> <br />
</s:iterator>



